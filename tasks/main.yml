---
# tasks file for collect-and-configure-terraform-for-disconnected-env
- name: '{{ ansible_name_module }} | copy | terraform provider binary bundle to bastion'
  when:
    - install_terraform_provider is defined
    - install_terraform_provider | bool
  block:
    - name: '{{ ansible_name_module }} | copy | terraform provider binary bundle to bastion'
      copy:
        src: "{{ install_terraform_provider_bundle }}"
        dest: "{{ tf_dir_bundle_location }}/{{ install_terraform_provider_bundle | basename }}"
        mode: 0755
        force: yes
      when:
        - inventory_hostname != 'localhost'
      register: terraform_client_copied

    - name: '{{ ansible_name_module }} | shell | get installed tf version '
      shell: terraform version | head -n 1 | awk '{print $2}'
      ignore_errors: true
      register: ter_ver 

    - name: '{{ ansible_name_module }} | file:state=directory | Ensure terraform provider directory exist '
      file:
        path: "{{ terraform_provider_dir }}"
        state: directory
        recurse: true

    - name: '{{ ansible_name_module }} | unarchive | bundle provider files to host'
      unarchive:
        src: "{{ install_terraform_provider_bundle }}"
        remote_src: yes
        dest: "{{ terraform_provider_dir}}/"
        mode: 0755
      register: unbundle_out

    - name: '{{ ansible_name_module }} | file:state=directory | for each provider '
      file:
        path: "{{ terraform_provider_dir }}/{{ terraform_domain }}/{{ terraform_namespace }}/{{ item.key }}/{{ item.value.version }}/{{ terraform_provider_type }}"
        state: directory
        recurse: true
      with_dict:
        - "{{ terraform_providers }}" 
      #when:
      #  - not ter_ver.stdout.split('v')[1] is version_compare('13.0.0', '<=')

    - name: '{{ ansible_name_module }} | shell:mv | for each provider '
      shell: mv {{ terraform_provider_dir }}/terraform-provider-{{ item.key }} {{ terraform_provider_dir }}/{{ terraform_domain }}/{{ terraform_namespace }}/{{ item.key }}/{{ item.value.version }}/{{ terraform_provider_type }} 
      with_dict:
        - "{{ terraform_providers }}" 
      #when:
      #  - not ter_ver.stdout.split('v')[1] is version_compare('13.0.0', '<=')

    - name: '{{ ansible_name_module }} | set_fact | set terraformrc config file'
      set_fact:
        tfrc_file_suffix: "-v{{ (ter_ver.stdout.split('v')[1]).split('.')[1] }}.j2"
        tfrc_file_prefix: "terraformrc"

    - name: '{{ ansible_name_module }} | template | create terraform provider v14 config file'
      template:
        src: "templates/terraform/{{ tfrc_file_prefix }}{{ tfrc_file_suffix }}"
        dest: "{{ terraform_provider_dir }}/main.tf"
        mode: 0755
        force: yes

    - name: '{{ ansible_name_module }} | shell:terraform.init | Initilize terraform provider module'
      shell:
        cmd: terraform init
        chdir: "{{ terraform_provider_dir }}"
      failed_when:
        - terraform_init.rc > 1
        - " not 'not available for installation' in terraform_init.stderr "
      register: terraform_init

      

- name: '{{ ansible_name_module }} | configure default tf provider on bastion'
  when:
    - config_default_terraform_provider is defined
    - config_default_terraform_provider | bool
  block:
    - name: '{{ ansible_name_module }} | file:state=directory | Ensure terraform directory exist '
      file:
        path: "{{ terraform_provider_dir }}/{{ terraform_provider_type }}"
        state: directory
        recurse: true

    - name: '{{ ansible_name_module }} | copy | provider binary to default location '
      copy: 
        src: "{{ terraform_provider_dir }}/{{ terraform_domain }}/{{ terraform_namespace }}/{{ item.key }}/{{ item.value.version }}/{{ terraform_provider_type }}/terraform-provider-{{ item.key }}"
        dest: "{{ terraform_provider_dir }}/{{ terraform_provider_type }}" 
        mode: '0755'
      with_dict:
        - "{{ terraform_providers }}" 
      when:
        - item.value.default is defined and item.value.default | bool

    - name: '{{ ansible_name_module }} | template | create terraformrc file'
      template:
        src: "templates/terraform/terraformrc.j2"
        dest: "{{ terraform_provider_config_file }}"
        force: yes

    - name: '{{ ansible_name_module }} | template | create terraform provider file'
      template:
        src: "templates/terraform/provider-local-{{ terraform_provider_full_name.split('-')[2] }}.j2"
        dest: "{{ terraform_provider_dir }}/{{ terraform_provider_type }}/main.tf"
        mode: 0755
        force: yes

    - name: '{{ ansible_name_module }} | shell:terraform.init | Initilize terraform provider module'
      shell:
        cmd: terraform init
        chdir: "{{ terraform_provider_dir }}/{{ terraform_provider_type }}"
      failed_when:
        - terraform_init.rc > 1
        - " not 'not available for installation' in terraform_init.stderr "
      register: terraform_init

